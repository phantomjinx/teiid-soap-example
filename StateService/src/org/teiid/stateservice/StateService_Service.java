package org.teiid.stateservice;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.xml.XMLConstants;
import javax.xml.namespace.QName;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.handler.Handler;
import javax.xml.ws.handler.HandlerResolver;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.PortInfo;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;

import org.apache.cxf.ws.security.SecurityConstants;
import org.apache.ws.security.WSPasswordCallback;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2013-03-01T17:38:33.448Z
 * Generated source version: 2.4.6
 * 
 */
@WebServiceClient( name = "stateService", wsdlLocation = "file:/home/phantomjinx/programming/java/td-projects/SOAPExample/StateService/WebContent/stateService.wsdl", targetNamespace = "http://www.teiid.org/stateService/" )
public class StateService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.teiid.org/stateService/", "stateService");
    public final static QName StateServiceImplPort = new QName("http://www.teiid.org/stateService/", "StateServiceImplPort");
    static {
        URL url = null;
        try {
            url = new URL(
                          "file:/home/phantomjinx/programming/java/td-projects/SOAPExample/StateService/WebContent/stateService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(StateService_Service.class.getName()).log(java.util.logging.Level.INFO,
                                                                                         "Can not initialize the default wsdl from {0}",
                                                                                         "file:/home/phantomjinx/programming/java/td-projects/SOAPExample/StateService/WebContent/stateService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public StateService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public StateService_Service(URL wsdlLocation,
                                QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public StateService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StateService_Service(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StateService_Service(URL wsdlLocation,
                                WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StateService_Service(URL wsdlLocation,
                                QName serviceName,
                                WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns StateService
     */
    @WebEndpoint( name = "StateServiceImplPort" )
    public StateService getStateServiceImplPort() {
        return super.getPort(StateServiceImplPort, StateService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns StateService
     */
    @WebEndpoint( name = "StateServiceImplPort" )
    public StateService getStateServiceImplPort(WebServiceFeature... features) {
        return super.getPort(StateServiceImplPort, StateService.class, features);
    }

    private static class UsernamePasswordCallback implements CallbackHandler {
        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
            WSPasswordCallback pc = (WSPasswordCallback)callbacks[0];
            if ("user".equals(pc.getIdentifier())) pc.setPassword("user");
        }
    }

    public static void main(String[] args) throws Exception {
        String serviceURL = "http://goshawk:8080/StateService/StateService";

        URL wsdlURL = new URL(serviceURL + "?wsdl");
        Service service = Service.create(wsdlURL, SERVICE);
        
        HeaderHandlerResolver handlerResolver = new HeaderHandlerResolver("user","user");
        service.setHandlerResolver(handlerResolver);
        
        StateService proxy = (StateService)service.getPort(StateService.class);

//        Map<String, Object> ctx = ((BindingProvider)proxy).getRequestContext();
//
//        ctx.put(SecurityConstants.USERNAME, "user");
//        ctx.put(SecurityConstants.CALLBACK_HANDLER, UsernamePasswordCallback.class.getName());

        List<StateInfo> allStateInfo = proxy.getAllStateInfo();
        for (StateInfo info : allStateInfo) {
            System.out.println(info.getName());
        }

    }
    
    private static class HeaderHandlerResolver implements HandlerResolver {

        private String userName;

        private String password;

        public HeaderHandlerResolver() {
            super();

        }

        public HeaderHandlerResolver(String userName,String password) {
            super();
     this.userName = userName;
     this.password = password;
        }

        @SuppressWarnings("unchecked")
        public List<Handler> getHandlerChain(PortInfo portInfo) {
            List<Handler> handlerChain = new ArrayList<Handler>();

            HeaderHandler hh = new HeaderHandler(userName,password);

            handlerChain.add(hh);

            return handlerChain;
        }
    }
    
    private static class HeaderHandler implements SOAPHandler<SOAPMessageContext> {

        /** The Constant logger. */
        private static final Logger logger = Logger.getLogger(HeaderHandler.class.getName());

        /** The Constant WS_SECURITY_SECEXT_URI. */
        private static final String WS_SECURITY_SECEXT_URI = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";

        /** The Constant WS_SECURITY_UTILITY_URI. */
        private static final String WS_SECURITY_UTILITY_URI = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";

        /** The Constant WS_PASSWORD_TYPE_URI. */
        private static final String WS_PASSWORD_TYPE_URI = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText";

        /** The Constant WSSE_PREFIX. */
        private static final String WSSE_PREFIX = "wsse";

        /** The Constant SECURITY_LOCAL_NAME. */
        private static final String SECURITY_LOCAL_NAME = "Security";

        /** The Constant USERNAME_TOKEN_LOCAL_NAME. */
        private static final String USERNAME_TOKEN_LOCAL_NAME = "UsernameToken";

        /** The Constant LOCAL_PART_XMLNS_WSU. */
        private static final String LOCAL_PART_XMLNS_WSU = "wsu";

        /** The Constant USERNAME_LOCAL_NAME. */
        private static final String USERNAME_LOCAL_NAME = "Username";

        /** The Constant PASSWORD_LOCAL_NAME. */
        private static final String PASSWORD_LOCAL_NAME = "Password";

        /** The Constant PASSWORD_ATTRIBUTE_TYPE. */
        private static final String PASSWORD_ATTRIBUTE_TYPE = "Type";

        private static final String HIGHPHEN = "-";

        private String userName;

        private String password;

        public HeaderHandler(String userName,String password) {
            this.userName = userName;
     this.password = password;
        }

        /*
         * (non-Javadoc)
         * @see javax.xml.ws.handler.Handler#handleMessage(javax.xml.ws.handler.MessageContext)
         */
        public boolean handleMessage(SOAPMessageContext smc) {

            Boolean outboundProperty = (Boolean) smc.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
            SOAPMessage message = smc.getMessage();

            try {

                // Let's extract information and try to log XML.
                SOAPPart sp = message.getSOAPPart();
                SOAPEnvelope envelope = sp.getEnvelope();

             

                if (outboundProperty.booleanValue()) {

                    SOAPHeader header = envelope.getHeader();

                    if (header != null) {
                        header.detachNode();
                    }

                    header = envelope.addHeader();

                    SOAPElement security = header.addChildElement(SECURITY_LOCAL_NAME, WSSE_PREFIX, WS_SECURITY_SECEXT_URI);

                    SOAPElement usernameToken = security.addChildElement(USERNAME_TOKEN_LOCAL_NAME, WSSE_PREFIX);

                    QName qName = new QName(XMLConstants.NULL_NS_URI, LOCAL_PART_XMLNS_WSU);
                    usernameToken.addAttribute(qName, WS_SECURITY_UTILITY_URI);

                    SOAPElement username = usernameToken.addChildElement(USERNAME_LOCAL_NAME, WSSE_PREFIX);

                    username.addTextNode(userName);

                    SOAPElement passwordNode = usernameToken.addChildElement(PASSWORD_LOCAL_NAME, WSSE_PREFIX);
                    passwordNode.setAttribute(PASSWORD_ATTRIBUTE_TYPE, WS_PASSWORD_TYPE_URI);

                    passwordNode.addTextNode(password);

                }

            } catch (SOAPException se) {
                logger.log(Level.SEVERE, "SOAPException occured while processing the message", se);

            }

            return outboundProperty;

        }

        /**
         * Gets the sOAP message as string.
         * 
         * @param msg the msg
         * @return the sOAP message as string
         */
        private String getSOAPMessageAsString(SOAPMessage msg) {

            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                msg.writeTo(baos);
                return baos.toString();

            } catch (Exception e) {
                logger.log(Level.WARNING, "Could not extract XML from soap message");
                return null;
            }
        }

        /*
         * (non-Javadoc)
         * @see javax.xml.ws.handler.soap.SOAPHandler#getHeaders()
         */
        public Set<QName> getHeaders() {
            // throw new UnsupportedOperationException("Not supported yet.");
            logger.info("getHeaders() is called");
            return null;
        }

        /*
         * (non-Javadoc)
         * @see javax.xml.ws.handler.Handler#handleFault(javax.xml.ws.handler.MessageContext)
         */
        public boolean handleFault(SOAPMessageContext context) {
            // throw new UnsupportedOperationException("Not supported yet.");
            logger.info("handleFault() is called");
            return true;
        }

        /*
         * (non-Javadoc)
         * @see javax.xml.ws.handler.Handler#close(javax.xml.ws.handler.MessageContext)
         */
        public void close(MessageContext context) {
            logger.info("close() is called");
            // throw new UnsupportedOperationException("Not supported yet.");
        }
    }

}
